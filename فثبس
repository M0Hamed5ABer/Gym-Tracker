<!DOCTYPE html>
<html lang="ar" dir="rtl">
  <head>
    <meta charset="UTF-8" />
    <title>Gym Tracker</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      body {
        font-family: Arial;
        text-align: center;
        direction: rtl;
        background: #bdf7ff;
        color: #000;
        padding: 20px;
        transition: background 0.3s, color 0.3s;
      }
      .dark-mode {
        background: #121212;
        color: #fff;
      }
      .dark-mode .exercise {
        background: #1e1e1e;
        box-shadow: 0 0 10px #555;
        color: #fff;
      }
      .dark-mode button {
        background-color: #333;
        color: #fff;
      }
      .dark-mode button:hover {
        background-color: #fff;
        color: #000;
      }
      .dark-mode input[type="number"] {
        background-color: #333;
        color: #fff;
        border: 1px solid #777;
      }
      .main-title {
        padding-left: 40px;
      }
      #exerciseTypes {
        margin: 20px 0;
      }
      #exerciseTypes button {
        margin: 5px;
        padding: 10px 20px;
        font-weight: bold;
        border-radius: 6px;
        cursor: pointer;
        background: #333;
        color: #fff;
      }
      #exerciseTypes button:hover {
        background: #fff;
        color: #000;
      }
      #addExerciseSection {
        position: relative;
      }
      #suggestions {
        left: 40px; /* ضبط هذا حسب تصميمك */
        top: 42px;
      }

      #tracker {
        display: flex;
        flex-direction: column;
      }
      .section {
        margin: 15px 0;
      }
      .exercise {
        background: #fff;
        margin: 10px auto;
        padding: 10px;
        width: 100%;
        max-width: 400px;
        border-radius: 8px;
        box-shadow: 0 0 10px #ccc;
      }
      .controls {
        margin-top: 10px;
      }
      canvas {
        max-width: 90%;
        margin-top: 30px;
        transition: transform 0.3s ease;
      }
      button {
        padding: 8px 32px;
        margin: 8px 5px;
        cursor: pointer;
        font-size: 1rem;
        font-weight: 600;
        background-color: #eee;
        border: none;
        border-radius: 6px;
      }
      button:hover {
        color: #fff;
        background-color: #000;
      }
      input[type="number"] {
        width: 100px;
        height: 40px;
        text-align: center;
      }
      #clearChart {
        background: red;
        color: white;
      }
      #toggleDarkMode {
        position: fixed;
        top: 15px;
        left: 15px;
        z-index: 999;
      }
    </style>
  </head>
  <body>
    <button id="toggleDarkMode">🌙</button>
    <h1 class="main-title">GYM TRACKER</h1>

    <!-- أزرار أنواع التمارين -->
    <div id="exerciseTypes">
      <button onclick="showExercises('تمارين الدفع')">تمارين الدفع</button>
      <button onclick="showExercises('تمارين السحب')">تمارين السحب</button>
      <button onclick="showExercises('تمارين الرجل')">تمارين الرجل</button>
      <button
        id="showAllBtn"
        onclick="showAllExercises()"
        style="display: none"
      >
        عرض الكل
      </button>
    </div>
    <div id="addExerciseSection" style="margin: 20px auto; max-width: 400px">
      <select id="exerciseGroup" style="padding: 8px; font-size: 1rem">
        <option value="تمارين الدفع">تمارين الدفع</option>
        <option value="تمارين السحب">تمارين السحب</option>
        <option value="تمارين الرجل">تمارين الرجل</option>
      </select>
      <input
        type="text"
        id="newExerciseName"
        placeholder="أدخل اسم التمرين"
        style="padding: 8px; width: 60%; font-size: 1rem"
        autocomplete="off"
      />
      <button onclick="addNewExercise()">➕ إضافة تمرين</button>
      <div
        id="suggestions"
        style="
          border: 1px solid #ccc;
          background: #fff;
          max-height: 150px;
          overflow-y: auto;
          display: none;
          position: absolute;
          z-index: 1000;
          width: 60%;
          margin: 0 auto;
        "
      ></div>
    </div>

    <div id="tracker"></div>

    <button id="saveData">💾 حفظ</button>
    <button id="expandChart">🖼️ تكبير/تصغير</button>
    <canvas id="progressChart"></canvas>
    <button id="clearChart">🗑️ مسح</button>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
      // قائمة تمارين افتراضية لعرضها كاقتراحات عند بدء الكتابة
      const defaultExercises = [
        "ضغط صدر",
        "سحب خلفي",
        "سكوات",
        "ضغط كتف",
        "تمرين الباي",
        "تمرين التراي",
        "رفعة ميتة",
        "طعنات الرجل",
        "تمرين السحب الأمامي",
        "ضغط أرجل",
      ];

      // تحميل التمارين من localStorage أو استخدام التمارين الافتراضية
      function loadExercises() {
        const saved = localStorage.getItem("exercises");
        if (saved) {
          return JSON.parse(saved);
        } else {
          return {
            "تمارين الدفع": [],
            "تمارين السحب": [],
            "تمارين الرجل": [],
          };
        }
      }

      // حفظ التمارين في localStorage
      function saveExercises() {
        localStorage.setItem("exercises", JSON.stringify(exercises));
      }

      const newExerciseInput = document.getElementById("newExerciseName");
      const suggestionsBox = document.getElementById("suggestions");

      // جمع كل التمارين في مصفوفة واحدة (لا تتكرر)
      function getAllExerciseNames() {
        const all = [];
        for (const group in exercises) {
          all.push(...exercises[group]);
        }
        all.push(...defaultExercises);
        return [...new Set(all)];
      }

      // إظهار الاقتراحات بناءً على نص الإدخال
      newExerciseInput.addEventListener("input", () => {
        const val = newExerciseInput.value.trim();
        suggestionsBox.innerHTML = "";
        if (!val) {
          suggestionsBox.style.display = "none";
          return;
        }
        const allNames = getAllExerciseNames();
        const filtered = allNames.filter((name) =>
          name.toLowerCase().includes(val.toLowerCase())
        );

        if (filtered.length === 0) {
          suggestionsBox.style.display = "none";
          return;
        }
        filtered.forEach((name) => {
          const div = document.createElement("div");
          div.textContent = name;
          div.style.padding = "6px";
          div.style.cursor = "pointer";
          div.addEventListener("click", () => {
            newExerciseInput.value = name;
            suggestionsBox.style.display = "none";
          });
          div.addEventListener("mouseenter", () => {
            div.style.backgroundColor = "#ddd";
          });
          div.addEventListener("mouseleave", () => {
            div.style.backgroundColor = "#fff";
          });
          suggestionsBox.appendChild(div);
        });
        suggestionsBox.style.display = "block";
      });

      // إخفاء صندوق الاقتراحات عند الضغط خارج خانة الإدخال أو الصندوق
      document.addEventListener("click", (e) => {
        if (
          e.target !== newExerciseInput &&
          e.target.parentNode !== suggestionsBox
        ) {
          suggestionsBox.style.display = "none";
        }
      });

      let exercises = loadExercises();

      const trackerDiv = document.getElementById("tracker");
      const saveBtn = document.getElementById("saveData");
      const chartCanvas = document.getElementById("progressChart");
      const chartCtx = chartCanvas.getContext("2d");
      const showAllBtn = document.getElementById("showAllBtn");
      let chart;

      let progressData = JSON.parse(localStorage.getItem("progressData")) || {};
      const tempWeights = {};
      const sectionsMap = {};

      function getLastWeight(ex) {
        return progressData[ex]?.slice(-1)[0]?.weight || 0;
      }

      function createExerciseSection() {
        trackerDiv.innerHTML = ""; // تنظيف القسم قبل الإضافة (مهم عند إعادة الإنشاء)

        for (let group in exercises) {
          const section = document.createElement("div");
          section.className = "section";
          section.dataset.group = group;
          section.innerHTML = `<h2>${group}</h2>`;

          exercises[group].forEach((exercise) => {
            const container = document.createElement("div");
            container.className = "exercise";
            container.innerHTML = `
          <p>${exercise}</p>
          <div class="controls">
            <button onclick="changeWeight('${exercise}', 2.5)">⬆</button>
            <input id="${exercise}-weight" type="number" value="${getLastWeight(
              exercise
            )}" readonly>
            <button onclick="changeWeight('${exercise}', -2.5)">⬇</button>
            <button onclick="deleteExercise('${group}', '${exercise}')">🗑️</button>
          </div>
        `;
            section.appendChild(container);
          });

          trackerDiv.appendChild(section);
          sectionsMap[group] = section;
        }
      }

      function showExercises(group) {
        for (let g in sectionsMap) {
          sectionsMap[g].style.display = g === group ? "block" : "none";
        }
        showAllBtn.style.display = "inline-block"; // إظهار زر عرض الكل بعد الاختيار
      }

      function showAllExercises() {
        for (let g in sectionsMap) {
          sectionsMap[g].style.display = "block";
        }
        showAllBtn.style.display = "none"; // إخفاء زر عرض الكل
      }

      function changeWeight(ex, delta) {
        tempWeights[ex] = (tempWeights[ex] ?? getLastWeight(ex)) + delta;
        tempWeights[ex] = Math.max(0, tempWeights[ex]);
        document.getElementById(`${ex}-weight`).value = tempWeights[ex];
      }

      saveBtn.addEventListener("click", () => {
        const today = new Date().toLocaleDateString("ar-EG");
        for (let ex in tempWeights) {
          if (!progressData[ex]) progressData[ex] = [];
          progressData[ex].push({ weight: tempWeights[ex], date: today });
        }
        localStorage.setItem("progressData", JSON.stringify(progressData));
        drawChart();
        alert("✅ تم حفظ التغييرات بنجاح");
      });

      function drawChart() {
        if (chart) chart.destroy();
        const datasets = [];
        let labels = [];

        for (let ex in progressData) {
          const data = progressData[ex];
          const weights = data.map((d) => d.weight);
          const dates = data.map((d) => d.date);
          labels = [...new Set([...labels, ...dates])];

          datasets.push({
            label: ex,
            data: weights,
            borderColor:
              "#" + Math.floor(Math.random() * 16777215).toString(16),
            fill: false,
            tension: 0.3,
          });
        }

        chart = new Chart(chartCtx, {
          type: "line",
          data: {
            labels: labels,
            datasets: datasets,
          },
          options: {
            responsive: true,
            plugins: {
              legend: { position: "bottom" },
              title: { display: true, text: "تطور الأوزان حسب التاريخ" },
            },
          },
        });
      }

      document.getElementById("clearChart").addEventListener("click", () => {
        if (confirm("هل أنت متأكد من مسح جميع البيانات؟")) {
          localStorage.removeItem("progressData");
          progressData = {};
          if (chart) chart.destroy();
          document
            .querySelectorAll("input[type='number']")
            .forEach((input) => (input.value = 0));
        }
      });

      document.getElementById("expandChart").addEventListener("click", () => {
        chartCanvas.style.transform =
          chartCanvas.style.transform === "scale(1.5)"
            ? "scale(1)"
            : "scale(1.5)";
      });

      const toggleDarkBtn = document.getElementById("toggleDarkMode");

      function applyTheme() {
        const mode = localStorage.getItem("theme");
        if (mode === "dark") {
          document.body.classList.add("dark-mode");
        } else {
          document.body.classList.remove("dark-mode");
        }
      }

      toggleDarkBtn.addEventListener("click", () => {
        document.body.classList.toggle("dark-mode");
        const mode = document.body.classList.contains("dark-mode")
          ? "dark"
          : "light";
        localStorage.setItem("theme", mode);
      });

      function addNewExercise() {
        let name = document.getElementById("newExerciseName").value.trim();
        name = name.replace(/\s+/g, " "); // تنظيف الفراغات الزائدة

        if (name.length === 0) {
          alert("❗ اسم التمرين غير صالح");
          return;
        }

        const group = document.getElementById("exerciseGroup").value;

        if (
          exercises[group].some((ex) => ex.toLowerCase() === name.toLowerCase())
        ) {
          alert("⚠️ التمرين موجود مسبقًا");
          return;
        }

        exercises[group].push(name);
        saveExercises();

        const section = sectionsMap[group];
        const container = document.createElement("div");
        container.className = "exercise";
        container.innerHTML = `
      <p>${name}</p>
      <div class="controls">
        <button onclick="changeWeight('${name}', 2.5)">⬆</button>
        <input id="${name}-weight" type="number" value="0" readonly>
        <button onclick="changeWeight('${name}', -2.5)">⬇</button>
        <button onclick="deleteExercise('${group}', '${name}')">🗑️</button>
      </div>
    `;
        section.appendChild(container);

        showAllExercises();
        document.getElementById("newExerciseName").value = "";
      }

      function deleteExercise(group, name) {
        if (confirm(`هل تريد حذف التمرين "${name}"؟`)) {
          exercises[group] = exercises[group].filter((ex) => ex !== name);
          saveExercises();

          const input = document.getElementById(`${name}-weight`);
          if (input) input.closest(".exercise").remove();

          delete progressData[name];
          localStorage.setItem("progressData", JSON.stringify(progressData));
        }
      }

      applyTheme();
      createExerciseSection();
      showAllExercises(); // إظهار كل التمارين عند البداية
    </script>
  </body>
</html>
